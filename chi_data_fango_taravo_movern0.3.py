



import numpy as np

import matplotlib.pyplot as plt

import matplotlib



import string

key = [1,2,3,4,5,6,7,8,9]



regions = ['index0' ,"Siliclastic Rocks", "Volcano Sedimentary Sequence", "Granitic Rocks", "Rhyolitic Rocks", "Alluvium","Siliclastic and Chemical Rocks","Ultramafic Rocks", "Metamorphic Rocks", "Carbonatic Rocks"]
colors= ['white',"#049FBB", "#5DF10A", "#BF5B3F", "#A95058", "#9C6BE1","#6CC43C","#7B3001", "#B3D407","#97CE66"]

    
#region_colors=dict(zip(rocktype,colors))
#chi data from LSDTopoTools for all of Corsica
data3=np.loadtxt('corsica_PP_chi_data_0.3.csv',skiprows=1,delimiter=',')   
data4= np.loadtxt('corsica_PP_chi_data_0.4.csv',skiprows=1,delimiter=',')   
#gets rid of no data values
data3 = data3[data3[:,12]>=0, :]
data4 = data4[data4[:,12]>=0, :]
#change these variables depending on what basin you are interested in
fango = data3[data3[:,13]==50]                  
taravo= data3[data3[:,13]==94]
tavig = data4[data4[:,13]==62]
#iterates through the basins
for x in (fango,taravo,tavig):
     
    if np.all(x[:,13]==50):
        loc=np.loadtxt('fango_location.txt')    #file containing flow_distance and chi information so site locations can be plotted on the profile
        labels = ['c0102','c0103','c0201','c0202','c0104','c0203','c0204','c0105']   
        fname='Fango'
        xbins=20
        ybins=20
        
    elif np.all(x[:,13]==94):
        loc=np.loadtxt('taravo_location.txt')
        labels=['c0704','c0703','c0702','c0701','c0604','c0603','c0706','c0602','c0601','c0501','c0502','c0503','c0504']
        fname='Taravo'
        xbins=40
        ybins=40
        
    else:
        loc=np.loadtxt('tavig_location.txt')
        labels=['c1001','c0901','c0804','c0803','c0802','c0801']
        fname = 'Tavignano'
        xbins=60
        ybins=60

    flow_distance=x[:,7]  #distance upstream from the outlet
    chi2=loc[:,4]    #chi coordinate of sites
    flow2=loc[:,3]   #distance upstream from outlet for sites
    ele2=loc[:,5]    #elevation of sites
    chi=x[:,5]        #\chi value at each site
    elevation=x[:,6]  # elevation of points
    m_chi=x[:,9]      #gradient of the chi slope in chi-elevation space
    geo=x[:,12]       #underlying rock_type at the point on the channel
   
    #next section provides the variables in order to plot the average m_chi vs chi, with the option of adding in the averaged geo
    ny,_=np.histogram(m_chi,bins=xbins) #number of m_chi values in each chi bin
    ngeo,_=np.histogram(m_chi,bins=xbins) #number of geo values in each xbin
    sgeo,_=np.histogram(m_chi,bins=xbins,weights=geo)  #sum of the geo values in each xbin
    meangeo=sgeo/ngeo  #the mean geo value for each bin
    meangeo=np.around(meangeo)  #mean value rounded to the nearest whole number so that it conincides with the key
    sy, _ = np.histogram(m_chi,bins=xbins,weights=chi) #sum of m_chi values in each chi bin
    sy2, _ = np.histogram(m_chi,bins=xbins,weights=chi*chi) #sum of squares for m_chi values in each chi bin
    nx,_=np.histogram(chi,bins=ybins)  #number of chi values in each m_chi bin
    sx,_ = np.histogram(chi,bins=ybins,weights=m_chi)  #sum of chi values in each m_chi bin
    sx2,_=np.histogram(chi,bins=ybins,weights=m_chi*m_chi)  #sum of squares of every chi value in each m_chi bin
    
    
    meanx=sy/ny #mean chi value in each m_chi bin
    meany=sx/nx #mean m_chi value in each chi
    stdx=np.sqrt(sy2/ny-meanx*meanx) #standard deviation for each chi value
    stdy=np.sqrt(sx2/nx-meany*meany) #standard deviation for each m_chi
    #create subplots
    fig, axes = plt.subplots(3,1)
    fig.set_size_inches(8.27,11.69)
    fig.subplots_adjust(top=0.92, left=0.07, right=0.97,
                    hspace=0.3, wspace=0.3)

    ((ax1),(ax2),(ax3)) = axes
    geo = [ int(x) for x in geo ] #converts each float value for geo into an integer
    #plots flow distance against elevation, each point is coloured accoring to the colors key at the top,
    #which corresponds to the lithokey generated by LSDTopoTools
    ax1.scatter(flow_distance,elevation,c=[colors[index] for index in geo],edgecolors='none',s=3) 
    #ax1.scatter(flow_distance, elevation, c=geo, cmap=matplotlib.colors.ListedColormap(colorss))
    print np.max(meanx)
    print np.max(meany)
    #ax1.scatter(flow_distance, elevation, color=colors,s=2)
    #next section annotates each point according to the site name
    for label, x, y in zip(labels, flow2, ele2):
        ax1.annotate(
            label,
            xy=(x, y), xytext=(-20, 60),
            textcoords='offset points', ha='right', va='bottom',
            bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.2),
            arrowprops=dict(arrowstyle = '->', connectionstyle='arc3,rad=0',))
    ax1.scatter(flow2,ele2,s=10,c='r',marker='D')

    #some params controlling the subplot
    ax1.set_xlim([0,(np.max(flow_distance)+1000)])
    ax1.set_ylim([0,(np.max(elevation)+0.5)])
    ax1.set_ylabel('Elevation (m)',fontsize=15, rotation=90)
    ax1.tick_params(axis='both', which='major', labelsize=10)
    ax1.set_xlabel('Distance upstream from outlet (m)',fontsize=15)
    ax1.annotate('a)', xy=(3, 1), xytext=(0.05,0.85),textcoords='axes fraction')
    ax1.get_xaxis().tick_bottom()
    ax1.get_yaxis().tick_left()
    #same plot again, but chi is plotted against elevation in chi space
    ax2.scatter(chi,elevation,c=[colors[index] for index in geo],edgecolors='none',s=3)
    ax2.set_xlim([0,(np.max(chi)+1)])
    ax2.set_ylim([0,(np.max(elevation)+0.5)])
    ax2.set_ylabel('Elevation (m)',fontsize=15, rotation=90)
    ax2.tick_params(axis='both', which='major', labelsize=10)
    ax2.set_xlabel('$\chi$ (m)',fontsize=20)
    
    handlelist = [plt.plot([], marker="o", ls="", color=color)[0] for color in colors]  #controls the legend
    ax2.legend(handlelist,regions,loc='upper left',prop={'size': 9},frameon='False')
    ax2.annotate('b)', xy=(3, 1), xytext=(-0.05,0.85),textcoords='axes fraction')
    ax2.get_xaxis().tick_bottom()
    ax2.get_yaxis().tick_left()
    
    #plots mean chi vs mean m_chi with the standard deviation as the error on each point
    ax3.errorbar(meanx, meany,yerr=stdy,xerr=stdx,fmt='.')
    #next section can be used to plot the average geo for each section, not very useful
    #ax3.scatter(meanx,meany,c=meangeo, cmap=matplotlib.colors.ListedColormap(colors),s=80,zorder=2)
    ax3.set_ylabel('$M_{\chi}$',fontsize=15)
    ax3.tick_params(axis='both', which='major', labelsize=10)
    ax3.set_xlabel('$\chi$ (m)',fontsize=20)
    ax3.annotate('c)', xy=(3, 1), xytext=(0.05,0.85),textcoords='axes fraction')
    ax2.get_xaxis().tick_bottom()
    ax2.get_yaxis().tick_left()
    
    plt.savefig(fname+'_chi_coloured_for_lithology.png', bbox_inches='tight',title='Rock Type')
    for n, ax in enumerate(axes):
        ax.imshow(np.random.randn(10,10), interpolation='none')    
        ax.text(-0.1, 1.1, string.ascii_uppercase[n], transform=ax.transAxes, 
            size=20, weight='bold')

    
    
    